// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth.proto

package auth_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginIn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LoginInMultiError, or nil if none found.
func (m *LoginIn) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginInValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := LoginInValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginInMultiError(errors)
	}

	return nil
}

func (m *LoginIn) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginIn) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginInMultiError is an error wrapping multiple validation errors returned
// by LoginIn.ValidateAll() if the designated constraints aren't met.
type LoginInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginInMultiError) AllErrors() []error { return m }

// LoginInValidationError is the validation error returned by LoginIn.Validate
// if the designated constraints aren't met.
type LoginInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginInValidationError) ErrorName() string { return "LoginInValidationError" }

// Error satisfies the builtin error interface
func (e LoginInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginInValidationError{}

// Validate checks the field values on LoginOut with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginOut with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginOutMultiError, or nil
// if none found.
func (m *LoginOut) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return LoginOutMultiError(errors)
	}

	return nil
}

// LoginOutMultiError is an error wrapping multiple validation errors returned
// by LoginOut.ValidateAll() if the designated constraints aren't met.
type LoginOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginOutMultiError) AllErrors() []error { return m }

// LoginOutValidationError is the validation error returned by
// LoginOut.Validate if the designated constraints aren't met.
type LoginOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginOutValidationError) ErrorName() string { return "LoginOutValidationError" }

// Error satisfies the builtin error interface
func (e LoginOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginOutValidationError{}

// Validate checks the field values on GetRefreshTokenIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRefreshTokenIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRefreshTokenIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRefreshTokenInMultiError, or nil if none found.
func (m *GetRefreshTokenIn) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRefreshTokenIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRefreshToken()) < 1 {
		err := GetRefreshTokenInValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRefreshTokenInMultiError(errors)
	}

	return nil
}

// GetRefreshTokenInMultiError is an error wrapping multiple validation errors
// returned by GetRefreshTokenIn.ValidateAll() if the designated constraints
// aren't met.
type GetRefreshTokenInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRefreshTokenInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRefreshTokenInMultiError) AllErrors() []error { return m }

// GetRefreshTokenInValidationError is the validation error returned by
// GetRefreshTokenIn.Validate if the designated constraints aren't met.
type GetRefreshTokenInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRefreshTokenInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRefreshTokenInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRefreshTokenInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRefreshTokenInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRefreshTokenInValidationError) ErrorName() string {
	return "GetRefreshTokenInValidationError"
}

// Error satisfies the builtin error interface
func (e GetRefreshTokenInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRefreshTokenIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRefreshTokenInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRefreshTokenInValidationError{}

// Validate checks the field values on GetRefreshTokenOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRefreshTokenOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRefreshTokenOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRefreshTokenOutMultiError, or nil if none found.
func (m *GetRefreshTokenOut) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRefreshTokenOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return GetRefreshTokenOutMultiError(errors)
	}

	return nil
}

// GetRefreshTokenOutMultiError is an error wrapping multiple validation errors
// returned by GetRefreshTokenOut.ValidateAll() if the designated constraints
// aren't met.
type GetRefreshTokenOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRefreshTokenOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRefreshTokenOutMultiError) AllErrors() []error { return m }

// GetRefreshTokenOutValidationError is the validation error returned by
// GetRefreshTokenOut.Validate if the designated constraints aren't met.
type GetRefreshTokenOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRefreshTokenOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRefreshTokenOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRefreshTokenOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRefreshTokenOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRefreshTokenOutValidationError) ErrorName() string {
	return "GetRefreshTokenOutValidationError"
}

// Error satisfies the builtin error interface
func (e GetRefreshTokenOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRefreshTokenOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRefreshTokenOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRefreshTokenOutValidationError{}

// Validate checks the field values on GetAccessTokenIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenInMultiError, or nil if none found.
func (m *GetAccessTokenIn) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRefreshToken()) < 1 {
		err := GetAccessTokenInValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccessTokenInMultiError(errors)
	}

	return nil
}

// GetAccessTokenInMultiError is an error wrapping multiple validation errors
// returned by GetAccessTokenIn.ValidateAll() if the designated constraints
// aren't met.
type GetAccessTokenInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenInMultiError) AllErrors() []error { return m }

// GetAccessTokenInValidationError is the validation error returned by
// GetAccessTokenIn.Validate if the designated constraints aren't met.
type GetAccessTokenInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenInValidationError) ErrorName() string { return "GetAccessTokenInValidationError" }

// Error satisfies the builtin error interface
func (e GetAccessTokenInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenInValidationError{}

// Validate checks the field values on GetAccessTokenOut with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenOut with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenOutMultiError, or nil if none found.
func (m *GetAccessTokenOut) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return GetAccessTokenOutMultiError(errors)
	}

	return nil
}

// GetAccessTokenOutMultiError is an error wrapping multiple validation errors
// returned by GetAccessTokenOut.ValidateAll() if the designated constraints
// aren't met.
type GetAccessTokenOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenOutMultiError) AllErrors() []error { return m }

// GetAccessTokenOutValidationError is the validation error returned by
// GetAccessTokenOut.Validate if the designated constraints aren't met.
type GetAccessTokenOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenOutValidationError) ErrorName() string {
	return "GetAccessTokenOutValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessTokenOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenOutValidationError{}

// Validate checks the field values on CheckIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CheckInMultiError, or nil if none found.
func (m *CheckIn) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEndpointAddress()) < 1 {
		err := CheckInValidationError{
			field:  "EndpointAddress",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := CheckInValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckInMultiError(errors)
	}

	return nil
}

// CheckInMultiError is an error wrapping multiple validation errors returned
// by CheckIn.ValidateAll() if the designated constraints aren't met.
type CheckInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckInMultiError) AllErrors() []error { return m }

// CheckInValidationError is the validation error returned by CheckIn.Validate
// if the designated constraints aren't met.
type CheckInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckInValidationError) ErrorName() string { return "CheckInValidationError" }

// Error satisfies the builtin error interface
func (e CheckInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckInValidationError{}
