// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat.proto

package chat_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateChatIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateChatIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateChatInMultiError, or
// nil if none found.
func (m *CreateChatIn) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChat() == nil {
		err := CreateChatInValidationError{
			field:  "Chat",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateChatInValidationError{
					field:  "Chat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateChatInValidationError{
					field:  "Chat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChatInValidationError{
				field:  "Chat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateChatInMultiError(errors)
	}

	return nil
}

// CreateChatInMultiError is an error wrapping multiple validation errors
// returned by CreateChatIn.ValidateAll() if the designated constraints aren't met.
type CreateChatInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatInMultiError) AllErrors() []error { return m }

// CreateChatInValidationError is the validation error returned by
// CreateChatIn.Validate if the designated constraints aren't met.
type CreateChatInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatInValidationError) ErrorName() string { return "CreateChatInValidationError" }

// Error satisfies the builtin error interface
func (e CreateChatInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatInValidationError{}

// Validate checks the field values on ChatCreate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCreate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatCreateMultiError, or
// nil if none found.
func (m *ChatCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 256 {
		err := ChatCreateValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUserIdList()) < 1 {
		err := ChatCreateValidationError{
			field:  "UserIdList",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatCreateMultiError(errors)
	}

	return nil
}

// ChatCreateMultiError is an error wrapping multiple validation errors
// returned by ChatCreate.ValidateAll() if the designated constraints aren't met.
type ChatCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCreateMultiError) AllErrors() []error { return m }

// ChatCreateValidationError is the validation error returned by
// ChatCreate.Validate if the designated constraints aren't met.
type ChatCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCreateValidationError) ErrorName() string { return "ChatCreateValidationError" }

// Error satisfies the builtin error interface
func (e ChatCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCreateValidationError{}

// Validate checks the field values on CreateChatOut with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateChatOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatOut with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateChatOutMultiError, or
// nil if none found.
func (m *CreateChatOut) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateChatOutMultiError(errors)
	}

	return nil
}

// CreateChatOutMultiError is an error wrapping multiple validation errors
// returned by CreateChatOut.ValidateAll() if the designated constraints
// aren't met.
type CreateChatOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatOutMultiError) AllErrors() []error { return m }

// CreateChatOutValidationError is the validation error returned by
// CreateChatOut.Validate if the designated constraints aren't met.
type CreateChatOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatOutValidationError) ErrorName() string { return "CreateChatOutValidationError" }

// Error satisfies the builtin error interface
func (e CreateChatOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatOutValidationError{}

// Validate checks the field values on DeleteChatIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteChatIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChatIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteChatInMultiError, or
// nil if none found.
func (m *DeleteChatIn) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChatIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteChatInValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteChatInMultiError(errors)
	}

	return nil
}

// DeleteChatInMultiError is an error wrapping multiple validation errors
// returned by DeleteChatIn.ValidateAll() if the designated constraints aren't met.
type DeleteChatInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChatInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChatInMultiError) AllErrors() []error { return m }

// DeleteChatInValidationError is the validation error returned by
// DeleteChatIn.Validate if the designated constraints aren't met.
type DeleteChatInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChatInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChatInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChatInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChatInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChatInValidationError) ErrorName() string { return "DeleteChatInValidationError" }

// Error satisfies the builtin error interface
func (e DeleteChatInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChatIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChatInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChatInValidationError{}

// Validate checks the field values on SendMessageIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendMessageIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendMessageInMultiError, or
// nil if none found.
func (m *SendMessageIn) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMessage() == nil {
		err := SendMessageInValidationError{
			field:  "Message",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageInValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageInValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageInValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMessageInMultiError(errors)
	}

	return nil
}

// SendMessageInMultiError is an error wrapping multiple validation errors
// returned by SendMessageIn.ValidateAll() if the designated constraints
// aren't met.
type SendMessageInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageInMultiError) AllErrors() []error { return m }

// SendMessageInValidationError is the validation error returned by
// SendMessageIn.Validate if the designated constraints aren't met.
type SendMessageInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageInValidationError) ErrorName() string { return "SendMessageInValidationError" }

// Error satisfies the builtin error interface
func (e SendMessageInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageInValidationError{}

// Validate checks the field values on MessageCreate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageCreate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageCreate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageCreateMultiError, or
// nil if none found.
func (m *MessageCreate) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageCreate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChatId()) < 1 {
		err := MessageCreateValidationError{
			field:  "ChatId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := MessageCreateValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetText()) < 1 {
		err := MessageCreateValidationError{
			field:  "Text",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MessageCreateMultiError(errors)
	}

	return nil
}

// MessageCreateMultiError is an error wrapping multiple validation errors
// returned by MessageCreate.ValidateAll() if the designated constraints
// aren't met.
type MessageCreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageCreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageCreateMultiError) AllErrors() []error { return m }

// MessageCreateValidationError is the validation error returned by
// MessageCreate.Validate if the designated constraints aren't met.
type MessageCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageCreateValidationError) ErrorName() string { return "MessageCreateValidationError" }

// Error satisfies the builtin error interface
func (e MessageCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageCreateValidationError{}

// Validate checks the field values on SendMessageOut with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendMessageOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageOut with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendMessageOutMultiError,
// or nil if none found.
func (m *SendMessageOut) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SendMessageOutMultiError(errors)
	}

	return nil
}

// SendMessageOutMultiError is an error wrapping multiple validation errors
// returned by SendMessageOut.ValidateAll() if the designated constraints
// aren't met.
type SendMessageOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageOutMultiError) AllErrors() []error { return m }

// SendMessageOutValidationError is the validation error returned by
// SendMessageOut.Validate if the designated constraints aren't met.
type SendMessageOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageOutValidationError) ErrorName() string { return "SendMessageOutValidationError" }

// Error satisfies the builtin error interface
func (e SendMessageOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageOutValidationError{}
