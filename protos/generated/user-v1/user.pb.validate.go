// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user.proto

package user_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserRegister with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRegister) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegister with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRegisterMultiError, or
// nil if none found.
func (m *UserRegister) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegister) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 256 {
		err := UserRegisterValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserRegisterValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 256 {
		err := UserRegisterValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPasswordConfirm()); l < 8 || l > 256 {
		err := UserRegisterValidationError{
			field:  "PasswordConfirm",
			reason: "value length must be between 8 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Role_name[int32(m.GetRole())]; !ok {
		err := UserRegisterValidationError{
			field:  "Role",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserRegisterMultiError(errors)
	}

	return nil
}

func (m *UserRegister) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserRegister) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserRegisterMultiError is an error wrapping multiple validation errors
// returned by UserRegister.ValidateAll() if the designated constraints aren't met.
type UserRegisterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterMultiError) AllErrors() []error { return m }

// UserRegisterValidationError is the validation error returned by
// UserRegister.Validate if the designated constraints aren't met.
type UserRegisterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterValidationError) ErrorName() string { return "UserRegisterValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegister.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterValidationError{}

// Validate checks the field values on UserUpdate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdateMultiError, or
// nil if none found.
func (m *UserUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if wrapper := m.GetName(); wrapper != nil {

		if l := utf8.RuneCountInString(wrapper.GetValue()); l < 3 || l > 256 {
			err := UserUpdateValidationError{
				field:  "Name",
				reason: "value length must be between 3 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if wrapper := m.GetEmail(); wrapper != nil {

		if err := m._validateEmail(wrapper.GetValue()); err != nil {
			err = UserUpdateValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Role

	if len(errors) > 0 {
		return UserUpdateMultiError(errors)
	}

	return nil
}

func (m *UserUpdate) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserUpdate) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserUpdateMultiError is an error wrapping multiple validation errors
// returned by UserUpdate.ValidateAll() if the designated constraints aren't met.
type UserUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateMultiError) AllErrors() []error { return m }

// UserUpdateValidationError is the validation error returned by
// UserUpdate.Validate if the designated constraints aren't met.
type UserUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateValidationError) ErrorName() string { return "UserUpdateValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on CreateIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateInMultiError, or nil
// if none found.
func (m *CreateIn) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserRegister() == nil {
		err := CreateInValidationError{
			field:  "UserRegister",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserRegister()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInValidationError{
					field:  "UserRegister",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInValidationError{
					field:  "UserRegister",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserRegister()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInValidationError{
				field:  "UserRegister",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInMultiError(errors)
	}

	return nil
}

// CreateInMultiError is an error wrapping multiple validation errors returned
// by CreateIn.ValidateAll() if the designated constraints aren't met.
type CreateInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInMultiError) AllErrors() []error { return m }

// CreateInValidationError is the validation error returned by
// CreateIn.Validate if the designated constraints aren't met.
type CreateInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInValidationError) ErrorName() string { return "CreateInValidationError" }

// Error satisfies the builtin error interface
func (e CreateInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInValidationError{}

// Validate checks the field values on CreateOut with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOut with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateOutMultiError, or nil
// if none found.
func (m *CreateOut) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateOutMultiError(errors)
	}

	return nil
}

// CreateOutMultiError is an error wrapping multiple validation errors returned
// by CreateOut.ValidateAll() if the designated constraints aren't met.
type CreateOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOutMultiError) AllErrors() []error { return m }

// CreateOutValidationError is the validation error returned by
// CreateOut.Validate if the designated constraints aren't met.
type CreateOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOutValidationError) ErrorName() string { return "CreateOutValidationError" }

// Error satisfies the builtin error interface
func (e CreateOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOutValidationError{}

// Validate checks the field values on GetIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetInMultiError, or nil if none found.
func (m *GetIn) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetInValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetInMultiError(errors)
	}

	return nil
}

// GetInMultiError is an error wrapping multiple validation errors returned by
// GetIn.ValidateAll() if the designated constraints aren't met.
type GetInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInMultiError) AllErrors() []error { return m }

// GetInValidationError is the validation error returned by GetIn.Validate if
// the designated constraints aren't met.
type GetInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInValidationError) ErrorName() string { return "GetInValidationError" }

// Error satisfies the builtin error interface
func (e GetInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInValidationError{}

// Validate checks the field values on GetOut with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOut) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOut with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetOutMultiError, or nil if none found.
func (m *GetOut) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOut) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOutValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOutValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOutValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOutMultiError(errors)
	}

	return nil
}

// GetOutMultiError is an error wrapping multiple validation errors returned by
// GetOut.ValidateAll() if the designated constraints aren't met.
type GetOutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOutMultiError) AllErrors() []error { return m }

// GetOutValidationError is the validation error returned by GetOut.Validate if
// the designated constraints aren't met.
type GetOutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOutValidationError) ErrorName() string { return "GetOutValidationError" }

// Error satisfies the builtin error interface
func (e GetOutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOut.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOutValidationError{}

// Validate checks the field values on UpdateIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateInMultiError, or nil
// if none found.
func (m *UpdateIn) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateInValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserUpdate() == nil {
		err := UpdateInValidationError{
			field:  "UserUpdate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateInValidationError{
					field:  "UserUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateInValidationError{
					field:  "UserUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateInValidationError{
				field:  "UserUpdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateInMultiError(errors)
	}

	return nil
}

// UpdateInMultiError is an error wrapping multiple validation errors returned
// by UpdateIn.ValidateAll() if the designated constraints aren't met.
type UpdateInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInMultiError) AllErrors() []error { return m }

// UpdateInValidationError is the validation error returned by
// UpdateIn.Validate if the designated constraints aren't met.
type UpdateInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInValidationError) ErrorName() string { return "UpdateInValidationError" }

// Error satisfies the builtin error interface
func (e UpdateInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInValidationError{}

// Validate checks the field values on DeleteIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteInMultiError, or nil
// if none found.
func (m *DeleteIn) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteInValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteInMultiError(errors)
	}

	return nil
}

// DeleteInMultiError is an error wrapping multiple validation errors returned
// by DeleteIn.ValidateAll() if the designated constraints aren't met.
type DeleteInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInMultiError) AllErrors() []error { return m }

// DeleteInValidationError is the validation error returned by
// DeleteIn.Validate if the designated constraints aren't met.
type DeleteInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInValidationError) ErrorName() string { return "DeleteInValidationError" }

// Error satisfies the builtin error interface
func (e DeleteInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInValidationError{}
