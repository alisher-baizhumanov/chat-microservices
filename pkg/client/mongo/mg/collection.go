package mg

import (
	"context"
	"errors"
	"fmt"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	mongoLibrary "go.mongodb.org/mongo-driver/mongo"

	"github.com/alisher-baizhumanov/chat-microservices/pkg/logger"
)

var (
	// ErrInvalidID is used when an invalid ID is provided, for example, an ID that does not exist or is incorrectly formatted.
	ErrInvalidID = errors.New("invalid id")
)

type mongoCollection struct {
	collection *mongoLibrary.Collection
}

// InsertOne inserts a single document into the collection.
func (m *mongoCollection) InsertOne(ctx context.Context, queryName string, document any) (string, error) {
	logQuery(queryName, document)

	id, err := m.collection.InsertOne(ctx, document)
	if err != nil {
		return "", err
	}

	// The _id of the inserted document. A value generated by the driver will be of type primitive.ObjectID.
	if primitiveID, ok := id.InsertedID.(primitive.ObjectID); ok {
		return primitiveID.Hex(), nil
	}

	return fmt.Sprintf("%v", id.InsertedID), nil
}

// InsertMany inserts multiple documents into the collection.
func (m *mongoCollection) InsertMany(ctx context.Context, queryName string, documents []any) error {
	logQuery(queryName, documents)

	_, err := m.collection.InsertMany(ctx, documents)
	return err
}

// UpdateByID updates a document in the collection by its ID.
func (m *mongoCollection) UpdateByID(ctx context.Context, queryName string, id string, update bson.M) error {
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return fmt.Errorf("%w: %w", ErrInvalidID, err)
	}

	logQuery(queryName, id, update)

	filter := bson.M{"_id": objectID}

	_, err = m.collection.UpdateOne(ctx, filter, update)
	return err
}

func logQuery(queryName string, args ...any) {
	logger.Debug("mongo query",
		logger.String("query_name", queryName),
		logger.Any("args", args),
	)
}
